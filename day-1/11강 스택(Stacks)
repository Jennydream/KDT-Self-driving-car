## 개념 

스택이란?: 자료를 보관할 수 있는 (선형)구조로, 한 쪽 끝에서 넣고 꺼낼때는 맨 마지막에 넣은 것 부터 꺼낸다.
(LIFO; last-in first-out) 자료 구조

## 알고리즘 

S= Stack()

넣는 동작   : push() 
S.push(A)
꺼내는 동작 : pop()
S.pop()

size(): 현재 스택에 들어 있는 데이터 원소의 수를 구함
isEmpty(): 현재 스택이 비어 있는지를 판단 (size() == 0?)
push(x): 데이터 원소 x 를 스택에 추가
pop(): 스택에 가장 나중에 저장된 데이터 원소를 제거 (또한, 반환)
peek(): 스택에 가장 나중에 저장된 데이터 원소를 참조 (반환), 그러나 제거하지는 않음


## 연습문제

문제 설명

소괄호: ( )
중괄호: { }
대괄호: [ ]
를 포함할 수 있는 수식을 표현한 문자열 expr 이 인자로 주어질 때, 이 수식의 괄호가 올바르게 여닫혀 있는지를 판단하는 함수 solution() 을 완성하세요. 이 함수는 수식의 괄호가 유효하면 True 를, 그렇지 않으면 False 를 리턴합니다.

스택을 활용하여 수식 내의 괄호 여닫음의 유효성을 검사하는 알고리즘에 대해서는 동영상 강의 내용을 참고하세요.

#문제풀이 

class ArrayStack:

    def __init__(self):
        self.data = []

    def size(self):
        return len(self.data)

    def isEmpty(self):
        return self.size() == 0

    def push(self, item):
        self.data.append(item)

    def pop(self):
        return self.data.pop()

    def peek(self):
        return self.data[-1]


def solution(expr):
    match = {
        ')': '(',
        '}': '{',
        ']': '['
    }
    S = ArrayStack()
    for c in expr:
        if c in '({[':
            S.push(c)
        elif c in match:
            if S.isEmpty():
                return False
            else:
                t=S.pop()
                if t != match[c]:
                    return False
    return S.isEmpty()
