1. REGEX/RE
   - string, pattern : 일정한 규칙이 존재하는데서 사용
   - 종류 
     (1) POSIX REGEX : UNIX 계열 표준 정규표현식
         BRE(Basic RE) : grep이 작동되는 기본 값
         ERE(Extended RE) : 더 많은 표현식과 편의성 제공. egrep의 기본 값
         
     (2) PCRE(Perl Compatible Regular Expression) : Perl 정규 표현식 호환으로 확장된 기능 
         C언어 기반으로 시작. POSIX REGEX에 비해 좀 더 성능이 좋음. 현재 PCRE2버전 사용 
   
   - REGEX and EBNF(Extended Backus-Naur Form)
     *, +, ? ,[...]는 EBNF의 영향이 크다
   
   - grep(global regular expression print)
     유닉스에서 가장 기본적인 REGEX 평가 유틸리티
     
     -주요 옵션 
      --color : surround the matched(non-empty) strings
      -o : print only the matched parts of a matching line
      -e PATTERN : Use PATTERN as the pattern
      -v, --invert-match : Invert the sense of matching to select non-matching lines.
      -c : Suppress normal output
      -q, --quite: Quite
            
   - sed 
     strem editor로서 REGEX 기능을 일부 탑재
   - awk
     REGEX뿐만 아니라 문자열 관련의 방대한 기능을 가진 프로그래밍 언어. 제일 많은 기능을 가지고 있음 
     
   - grep>> sed >> awk 순으로 공부하면 좋음.
   
   
2. REGEX syntax
   . : 임의의 문자 한 개를 의미 
   ? : 선행문자 패턴이 0 /1 개 나타냄 -ERE
   + : 선행문자 패턴이 1개 이상 반복 -ERE
   * : 선행문자 패턴이 0개 이상 반복
   {m,n} : 반복수를 직접 지정할 수 있음 -ERE ({2,5} - 2~5번 반복)
   ^ : 라인의 앞부분을 의미 
   $ : 라인의 끝부분을 의미 
   [...] : 안에 지정된 문자들 그룹 중에 한 문자 지정
   [^...] : 안에 지정된 그룹의 문자를 제외한 나머지를 지정 
   \ : 메타의 의미를 없애줌 
   | : OR 연산 -ERE
   (): 괄호는 패턴을 그룹화 및 백레퍼런스의 작동 -ERE
  
  - grep (BRE)
    * 수량자만 바로 사용 가능 
    +,?,{} 패턴은 \를 앞에 더해줘야만 함
  - egrep (ERE)
    *,+,?,{} 패턴의 모든 기능이 기본적으로 제공 
  ^$ : 비어있는 행(행의 시작과 끝에 아무런 문자도 없음)
   $가 지정되면 그 뒤로는 라인의 끝을 의미 
  
  
3. REGEX : greedy
   - greedy matching : <b> real ...</i>까지 매칭된 결과 
     pattern은 최대한 많은 수의 매칭을 하려는 성질이 있음
     http://[A-Za-z./]*' - BRE
     http://[A-Za-z./]\+' -ERE
     BRE : vim, sed
     ERE : egrep, awk
     
   - non-greedy matching : 최소 매칭기능 == greedy matching의 반대 개념
     

4. REGEX : etc
   
   () : alternation 용도로 사용
   () 로 묶인 패턴 매칭 부분을 \#의 형태로 재사용 
     
   ERE -> BRE로 바꾸려면 
   ?,+{},(),| 는 escape을 시켜야 함
   
   sed, awk 로 교체작업 할 때 많음
   
   -sed : 제일 많이 쓰는 기능 substitution
    sed는 BRE를 기반으로 하므로 \+로 표현
    awk는 ERE를 사용하므로 +앞에 '\' 사용하지 않음
