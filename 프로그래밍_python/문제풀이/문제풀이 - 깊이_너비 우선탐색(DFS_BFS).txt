#알고리즘

  깊이 우선 탐색(DFS :Depth-First Search)?: 한 정점에서 인접한 모든(아직 방문하지 않은)정점을 방문하되, 각 인접 정점을 기준으로 깊이 우선 탐색을 끝낸 후 다음 정점으로 진행
  너비 우선 탐색(BFS) : 한 정점에서 인접한 모든(아직 방문하지 않은) 정점을 방문하고, 방문한 각 인접 정점을 기준으로( 방문한 순서에 따라) 다시 너비 우선 탐색을 진행
  
  -문제 : 여행 경로 
  
  모든 정점 방문 X, 모든 간선 거치기 O  
  스택을 이용하여 재귀적인 " 한 붓 그리기" 문제를 해결 ->DFS 알고리즘 응용 
  
  시작 : ICN 
  다음 : 알파벳 우선 값을 스택에 push. 이동할 때마다 알파벳 우선 순위 기준으로 스택에 push                
  최종으로 티켓을 다쓰면 스택에서 나머지 값을 pop()
  
  그래프 표현 : 사전을 이용하여 각 공항에서 출발하는 항공권의 집합을 표현 [리스트로 표현]
  (리스트에서는 뒤에서 요소를 제거하는 것이 더 편리하므로 알파벳을 역순으로 정렬)
 
#시간 복잡도 : O(NlogN)

#문제풀이 

주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 ICN 공항에서 출발합니다.

항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
모든 공항은 알파벳 대문자 3글자로 이루어집니다.
주어진 공항 수는 3개 이상 10,000개 이하입니다.
tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.
주어진 항공권은 모두 사용해야 합니다.
만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.
모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.


tickets =[["ICN", "JFK"], ["HND", "IAD"], ["JFK", "HND"]]
return = ["ICN", "JFK", "HND","IAD"]

def solution(tickets):
    # 여행 경로를 담을 사전 생성
    route={}
    
    # 사전에 출발공항과 도착 공항 정보를 리스트로 저장 
    for t in tickets:
        # 도착공항이 처음 등장할 경우 [], 이후 t[1](도착공항)을 리스트 병합으로 해줌
        route[t[0]]= route.get(t[0],[])+[t[1]]
    
    #알파벳을 역으로 정렬 
    for r in route:
        route[r].sort(reverse=True)
    
    #출발지인 인천공항을 먼저 넣음 
    stack=["ICN"]
    
    #최종 경로 담는 리스트
    path=[]

    #스택이 빌 때까지 반복
    while len(stack)>0:
        #스택의 맨 위의 값
        #top 출력 : ICN -> JFK -> HND
        top=stack[-1]
        #top이 route에 없을 경우 ( 출발표가 없음) 혹은 출발표가 다 사용되어 이제 없을 경우 path에 추가
        if top not in route or len(route[top])==0:
            path.append(stack.pop())
        else:
            # 갈 수 있는 공항이 있을 경우 top에서 갈 수 있는 공항들 중 마지막 공항(알파벳 역순이므로)을 스택에 넣음
            #route[top][-1] 출력: JFK -> HND- >IAD
            
            stack.append(route[top][-1])
            
            #표를 사용하였으므로 라우터에서는 해당 표 값은 제거
            route[top]=route[top][:-1]
    
    # 최종으로 경로의 역순으로 반환 
    return path[::-1]
