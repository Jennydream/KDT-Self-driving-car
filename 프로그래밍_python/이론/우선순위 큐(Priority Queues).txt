## 개념 

우선 순위 큐 ?: 큐가 FIFO방식을 따르지 않고 원소들의 우선순위에 따라 큐에서 빠져나오는 방식 

## 알고리즘 

  1. 선형 배열 이용 
  2. 연결 리스트 이용
  
  큐에 원소를 넣을 때 (enqueue 할 때) 우선순위 순서대로 정렬해 두는 방법
  큐에서 원소를 꺼낼 때 (dequeue 할 때) 우선순위가 가장 높은 것을 선택하는 방법
  getAt()은 이용하지 않음(삽입과정에 while을 사용하기 때문에 매번 같은 반복을 하지 않도록 하기 위해)
  
  ex: Enqueue : 6 7 3 2
      Dequeue : 2 3 6 7
   
-시간복잡도 
  enqueue : O(N)
  deququq : O(1)

## 연습문제

문제 설명
앞선 강의에서 소개된 양방향 연결 리스트의 추상적 자료구조 구현인 클래스 DoublyLinkedList 를 이용하여 우선순위 큐의 추상적 자료구조인 클래스 PriorityQueue 의 구현을 완성하세요.

#문제풀이 
https://school.programmers.co.kr/courses/11102/lessons/70480

def enqueue(self, x):
        #새로 삽입할 노드 
        newNode = Node(x)
        
        #큐의 head부터 시작 
        curr = self.queue.head
        
        #cur이 tail이 아니면서 현재 cur 데이터가 삽입하려는 값보다 클때까지
        while curr.next!=self.queue.tail and curr.next.data>x:
            #조건에 맞으면 다음 노드로 이동 
            curr = curr.next
        #위치에 도착하면 그 다음 위치에 새로운 노드 추가
        self.queue.insertAfter(curr, newNode)
