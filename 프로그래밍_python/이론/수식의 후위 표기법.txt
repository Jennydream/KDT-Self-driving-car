## 개념 

후위 표기법(Postfix Notation)이란? : 연산자를 두 피연산자의 뒤에 쓰는 방식. 예를 들어 A + B 를 후위 표기법으로 표기하면 AB+ 가 된다.

## 알고리즘 

 연산자 우선 순위를 설정하여 스택에 넣음 
 prec = {
    '*': 3, '/': 3,
    '+': 2, '-': 2,
    '(': 1
  }
  
  중위 표현식을 왼쪽부터 한 글자씩 읽어서 
    
  ()일 경우 : 피연산자이면 그냥 출략
              '('이면 스택에 push()
              ')'이면'('이 나올 때까지 스택에서 pop()
 연산자일 경우 : 스택에서 넣으러는 것보다 높거나 같은 우선순위 것들은 pop, 출력 
 스택에 남아있는 연산자는 모두 pop(), 출력


## 연습문제

문제 설명
중위 표기법을 따르는 수식 S 가 인자로 주어질 때, 이 수식을 후위 표기법을 따르는 수식으로 변환하여 반환하는 함수 solution() 을 완성하세요.

인자로 주어지는 수식 문자열 S 는 영문 대문자 알파벳 한 글자로 이루어지는 변수 A - Z 까지와 4칙연산을 나타내는 연산자 기호 +, -, *, /, 그리고 여는 괄호와 닫는 괄호 (, ) 로 이루어져 있으며 공백 문자는 포함하지 않는 것으로 가정합니다. 또한, 올바르게 구성되지 않은 수식은 인자로 주어지지 않는다고 가정합니다. (수식의 유효성은 검증할 필요가 없습니다.)

문제에서 미리 주어진, 연산자의 우선순위를 표현한 python dict 인 prec 을 활용할 수 있습니다.

또한, 스택의 기초 강의에서 이미 구현한, 배열을 이용한 스택의 추상적 자료 구조 코드가 이미 포함되어 있으므로 그대로 이용할 수 있습니다.

(참고) 테스트 케이스를 보완하여 문제가 2019년 9월 24일에 수정되었습니다.

#문제풀이 

https://school.programmers.co.kr/courses/11102/lessons/70472

def solution(S):
    opStack = ArrayStack() 
    
    answer = ''
    for i in range(len(S)):
        #연산자아니면 그냥 추가
        if S[i]>='A' and S[i]<='Z':
            answer+=S[i]
        else: 
            #'('를 만나면 스택에 그냥 push
            if S[i]=='(' :
                opStack.push(S[i])
            elif S[i]==')':
                #'('만날 때 까지 pop
                while not opStack.isEmpty():                  
                    if opStack.peek() =='(': 
                        opStack.pop()
                        break
                    else:                        
                        answer+=opStack.pop()
                                            
            else:
                if opStack.isEmpty():
                    opStack.push(S[i])                    
                else:
                    t=opStack.peek()
                    
                    # 스택의 맨위에 연산자가 넣으려는 연산자보다 우선순위가 낮으면 ('t='+', S[i]='*')이면 스택에 그냥 push
                    if prec.get(t)<prec.get(S[i]):   
                        opStack.push(S[i])  
                    else:          
                        #아닐 경우 나머지 연산자 다 pop( 넣으려는 것 보다 다 작은 연산자 순위)
                        while not opStack.isEmpty():
                            answer+=opStack.pop() 
                        #이후 현재 연산자 push             
                        opStack.push(S[i])     
                        
    #스택에 남은 나머지 연산자 pop                
    while not opStack.isEmpty():
        answer+=opStack.peek()
        opStack.pop()
     

    return answer