## 개념 

이진 탐색 트리?:  이미 정렬된 선형 배열을 대상으로 배열을 절반씩 잘라 가면서 찾고자 하는 원소 (또는 키 - key) 가 들어 있을 수 없음이 보장되는 절반을 탐색 대상에서 제외함으로써 매 반복에서 탐색 대상이 되는 배열의 길이를 반으로 만들어 나가는 알고리즘

## 알고리즘 
  insert(): 트리에 주어진 데이터 원소를 추가
  remove(): 특정 원소를 트리로부터 삭제
  lookup(): 특정 원소를 검색 (탐색)
  inorder(): 키의 순서대로 데이터 원소들을 나열
  min(), max(): 최소 키, 최대 키를 가지는 원소를 각각 탐색
  
-시간복잡도 
  배열 길이가 N일 때 : 삽입/삭제 (insert/remove) 연산 또한 평균적으로 O(logN)
    
## 연습문제

#문제풀이 
https://school.programmers.co.kr/courses/11102/lessons/70490

문제 설명
초기 코드에 주어진 class Node 와 class BinSearchTree 를 기반으로, 이진 탐색 트리 (binary search tree) 에 새로운 원소를 삽입하는 insert(key, data) 연산의 구현을 완성하세요.

def insert(self, key, data):

        #주어진 키가 방문한 노드의 키보다 작을 경우 왼쪽으로 이동 
        if key<self.key:
            if self.left:
                self.left.insert(key,data)
            else:
                self.left=Node(key, data)
        #주어진 키가 방문한 노드의 키보다 클을 경우 오른쪽으로 이동     
        elif key> self.key:
            if self.right:
                self.right.insert(key,data)
            else:
                self.right=Node(key, data)
            
        else:
            raise KeyError