## 알고리즘 
  - 최대 힙에서 원소 삭제 
    1. 루트 노드의 제거(원소들중 최댓 값)
    2. 트리 마지막 자리 노드를 임시로 루트 노드의 자리에 배치 
    3. 자식 노드들과의 값 비교와 아래로 이동(더 큰 값을 가지는 쪽으로 이동 (maxHeapify함수 사용))

-시간복잡도 
  삭제 최악 복잡도 : O(logN)
  정렬 복잡도 : O(NlogN)
  
## 연습문제

#문제풀이 
https://school.programmers.co.kr/courses/11102/lessons/70496

문제 설명
초기 코드에 여기 저기 포함된 빈 칸을 채움으로써 class MaxHeap 의 메서드인 maxHeapify() 의 구현을 완성하세요. 이것은 이미 주어져 있는 remove() 메서드와 연결되어 최대 힙에서의 원소 삭제 연산을 구성합니다

def maxHeapify(self, i):
        # 왼쪽 자식 (left child) 의 인덱스를 계산합니다.
        left = 2*i

        # 오른쪽 자식 (right child) 의 인덱스를 계산합니다.
        right = 2*i+1
       
        smallest = i
        # 왼쪽 자식이 존재하는지, 그리고 왼쪽 자식의 (키) 값이 (무엇보다?) 더 큰지를 판단합니다.
        if left<len(self.data) and self.data[smallest]<self.data[left]:
            # 조건이 만족하는 경우, smallest 는 왼쪽 자식의 인덱스를 가집니다.
            smallest=left

        # 오른쪽 자식이 존재하는지, 그리고 오른쪽 자식의 (키) 값이 (무엇보다?) 더 큰지를 판단합니다.
        if right<len(self.data)and self.data[smallest]<self.data[right]:
            # 조건이 만족하는 경우, smallest 는 오른쪽 자식의 인덱스를 가집니다.
            smallest=right

        if smallest != i:
            # 현재 노드 (인덱스 i) 와 최댓값 노드 (왼쪽 아니면 오른쪽 자식) 를 교체합니다.
            self.data[i],self.data[smallest] = self.data[smallest],self.data[i]

            # 재귀적 호출을 이용하여 최대 힙의 성질을 만족할 때까지 트리를 정리합니다.
            self.maxHeapify(smallest)