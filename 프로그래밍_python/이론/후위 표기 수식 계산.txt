## 개념 

  -주요 내용 
  후위 표기법으로 표현된 수식의 값을 계산 (evaluate) 하는 알고리즘을 설계하고 구현.
  (Python의 eval()함수로도 계산 가능)

## 알고리즘 

  수식을 왼쪽부터 시작해서 오른쪽으로 차례대로 읽어들이면서
  피연산자가 나타나면, 스택에 넣어 둔다.
  연산자가 나타나면, 스택에 들어 있는 피연산자를 두 개 꺼내어 연산을 적용하고, 그 결과를 다시 스택에 넣어 둔다.


## 연습문제

문제 설명
인자로 주어진 문자열 expr 은 소괄호와 사칙연산 기호, 그리고 정수들로만 이루어진 중위 표현 수식입니다. 함수 solution() 은 이 수식의 값을 계산하여 그 결과를 리턴하도록 작성되어 있습니다. 이 함수는 차례로 splitTokens(), infixToPostfix(), 그리고 postfixEval() 함수를 호출하여 이 수식의 값을 계산하는데,

splitTokens() - 강의 내용에서와 같은 코드로 이미 구현되어 있습니다.
infixToPostfix() - 지난 강의의 연습문제에서 작성했던 코드를 수정하여, 문자열이 아닌 리스트를 리턴하도록 작성합니다.
postfixEval() - 이번 강의의 연습문제입니다. 함수의 내용을 완성하세요.
즉, 두 개의 함수 infixToPostfix() 와 postfixEval() 을 구현하는 연습입니다. 스택을 이용하기 위하여 class ArrayStack 이 정의되어 있으므로 그것을 활용하세요.

#문제풀이 

https://school.programmers.co.kr/courses/11102/lessons/70474

#중위 표현법에서 후위 표현법으로 변환 
def infixToPostfix(tokenList):  
  
    #연산자 우선순위 
    prec = {
        '*': 3,
        '/': 3,
        '+': 2,
        '-': 2,
        '(': 1,
    }

    opStack = ArrayStack()
    postfixList = []
    S=tokenList
    
    # 후위로 변환 하는 과정(12강 연습문제 참고)
    for i in range(len(S)):       
        if type(S[i]) is int:
            postfixList.append(S[i])
        else: 
            if S[i]=='(' :
                opStack.push(S[i])
            elif S[i]==')':
                while not opStack.isEmpty():   
                    
                    if opStack.peek() =='(': 
                        opStack.pop()
                        break
                    else:                        
                        postfixList.append(opStack.pop())
                                            
            else:
                if opStack.isEmpty():
                    opStack.push(S[i])                    
                else:
                    t=opStack.peek()
                   
                    if prec.get(t)<prec.get(S[i]):   
                        opStack.push(S[i])  
                    else:          
                        while not opStack.isEmpty():
                            postfixList.append(opStack.pop())
                                     
                        opStack.push(S[i])     
                    
    while not opStack.isEmpty():
        postfixList.append(opStack.pop())
       
    return postfixList


#후위 표현식 계산 
def postfixEval(tokenList):
    valS=ArrayStack()
    
    for t in tokenList:
        # 숫자일 경우 스택에 push 
        if type(t) is int:
            valS.push(t)
        else:
            # 연산자일 경우 이미 넣어져 있는 숫자를 꺼내어 연산자에 맞게 계산
            v1=valS.pop()
            v2=valS.pop()
            
            if t=='*':   
                #'+'혹은 '/'일 경우 피연산자의 순서 중요.[먼저 꺼내는 연산자가(B) 이후 꺼내는 연산자(A) -> (A/B)]
                valS.push(v2*v1)
            elif t=='/':            
                valS.push(v2/v1)
            elif t=='+':            
                valS.push(v2+v1)
            elif t=='-':            
                valS.push(v2-v1)
    return valS.pop()
    