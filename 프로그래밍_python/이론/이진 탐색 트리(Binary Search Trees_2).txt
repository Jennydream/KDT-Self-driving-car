## 알고리즘 

  -원소 삭제 : 
    1. 키(key)를 이용하여 노드 찾음. 해당 키의 노드가 없으면 삭제 할 것도 없음. 찾는 노드의 부모 노드도 알고 있어야 함
    2. 찾는 노드를 제거하고도 이진 탐색 트리 성질을 만족하도록 트리 구조 정리
    
    - 자식 노드가 없을 때   : 그냥 노드를 삭제하고 부모 노드의 링크 정리
    - 자식 노드가 1개 일 때 : 삭제 되는 노드 자리에 그 자식을 대신 배치(왼쪽, 오른쪽을 찾아보고 부모노드의 링크 조정)
    - 자식 노드가 2개 일때  : 삭제되는 노드보다 바로 다음(큰) 키를 가지는 노드를 찾아 그 노드를 삭제되는 노드 자리에 대신 배치하고 이 노드를 대신 삭제

  - 참고 트리 
   AVL trees
   Red-black trees
  

## 연습문제

#문제풀이 
https://school.programmers.co.kr/courses/11102/lessons/70492

문제 설명
초기 코드에 주어진 class Node 와 class BinSearchTree 를 기반으로, 이진 탐색 트리 (binary search tree) 에서 지정된 원소를 삭제하는 remove(key) 연산의 구현을 완성하세요.

def remove(self, key):
        node, parent = self.lookup(key)
        if node:
            nChildren = node.countChildren()
            # The simplest case of no children
            if nChildren == 0:
                # 만약 parent 가 있으면
                # node 가 왼쪽 자식인지 오른쪽 자식인지 판단하여
                # parent.left 또는 parent.right 를 None 으로 하여
                # leaf node 였던 자식을 트리에서 끊어내어 없앱니다.
                if parent:
                    if parent.left==node:
                        parent.left=None 
                    elif parent.right== node:
                        parent.right=None
                # 만약 parent 가 없으면 (node 는 root 인 경우)
                # self.root 를 None 으로 하여 빈 트리로 만듭니다.
                else:
                    self.root=None
                    
            # When the node has only one child
            elif nChildren == 1:
                # 하나 있는 자식이 왼쪽인지 오른쪽인지를 판단하여
                # 그 자식을 어떤 변수가 가리키도록 합니다.
                if node.left:
                    temp=node.left
                else:
                    temp=node.right
                # 만약 parent 가 있으면
                # node 가 왼쪽 자식인지 오른쪽 자식인지 판단하여
                # 위에서 가리킨 자식을 대신 node 의 자리에 넣습니다.
                if parent:
                    if parent.left==node:
                        parent.left=temp
                    elif parent.right==node:
                        parent.right=temp
                # 만약 parent 가 없으면 (node 는 root 인 경우)
                # self.root 에 위에서 가리킨 자식을 대신 넣습니다.
                else:
                    self.root=temp
            # When the node has both left and right children
            else:
                parent = node
                successor = node.right
                # parent 는 node 를 가리키고 있고,
                # successor 는 node 의 오른쪽 자식을 가리키고 있으므로
                # successor 로부터 왼쪽 자식의 링크를 반복하여 따라감으로써
                # 순환문이 종료할 때 successor 는 바로 다음 키를 가진 노드를,
                # 그리고 parent 는 그 노드의 부모 노드를 가리키도록 찾아냅니다.
                while successor.left:
                    parent=successor
                    successor=successor.left
                # 삭제하려는 노드인 node 에 successor 의 key 와 data 를 대입합니다.
                node.key = successor.key
                node.data = successor.data
                # 이제, successor 가 parent 의 왼쪽 자식인지 오른쪽 자식인지를 판단하여
                # 그에 따라 parent.left 또는 parent.right 를
                # successor 가 가지고 있던 (없을 수도 있지만) 자식을 가리키도록 합니다.
                if successor==parent.left:
                    parent.left=successor.right
                else:
                    parent.right=successor.right

            return True

        else:
            return False