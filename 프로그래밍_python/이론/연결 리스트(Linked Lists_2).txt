## 개념 

- 주요 내용 
  원소의 삽입 (insertion)
  원소의 삭제 (deletion)
  두 리스트 합치기 (concatenation)
  
  이러한 연산이 쉽게 (빠르게) 이루어질 수 있다는 점이 연결 리스트가 선형 배열에 비하여 가지는 특장점
  
## 알고리즘 

 1. 원소의 삽입 (insertion)
 
  prev   newNode   pos
  
  prev.next를 newNode.next로 연결
  prev.next를 newNode 로 연결
  node 개수 1개 증가
 
  - 삽입 위치가 맨 앞일 때와 맨 뒤일 때
    newNode.next를 head로 설정 
    tail을 newNode를 가리키도록 함 
    
    
  2. 원소의 삭제 (deletion)
 
  prev   curr   pos
  
  prev.next를 curr.next로 연결 
  node 개수 1개 감소 
  
  3. 리스트 연결 
  
  list1의 tail의 다음을 list2의 헤드와 연결 
  리스트 tail을 list2의 tail로 지정 
  node 개수 : list1에 list2 node 값 추가
  

-시간복잡도 
  1. 원소 삽입
    맨앞 : O(1)
    중간 : O(N)
    마지막 : O(1)
    
  2. 원소 삭제 
    맨앞  : O(1)
    중간 및 마지막 : O(N)
  
## 연습문제

문제 설명
제 8 강에서 소개된 추상적 자료구조 LinkedList 클래스의 메서드로서 popAt() 메서드를 강의 내용에 소개된 요구조건을 만족시키도록 구현하세요.

초기 코드로 들어 있는 것은 solution() 함수를 포함하여 다른 부분은 수정하지 말고, def popAt(self, pos): 의 메서드 몸체만 구현하세요.

만약, 인자로 주어진 pos 가 올바른 범위의 값을 가지지 않는 경우에는 IndexError exception 을 발생시키도록 합니다. 이렇게 하기 위한 코드는 raise IndexError 입니다.

*** 2020년 3월 23일, 학습자의 질문에 답하면서 보니 특정한 경우의 정확성을 올바르게 검증하지 못하는 경우가 발견되어 테스트 케이스 4 번을 추가했습니다.

#문제풀이 

class Node:

    def __init__(self, item):
        self.data = item
        self.next = None


class LinkedList:

    def __init__(self):
        self.nodeCount = 0
        self.head = None
        self.tail = None


    def getAt(self, pos):
        if pos < 1 or pos > self.nodeCount:
            return None

        i = 1
        curr = self.head
        while i < pos:
            curr = curr.next
            i += 1

        return curr


    def insertAt(self, pos, newNode):
        if pos < 1 or pos > self.nodeCount + 1:
            return False

        if pos == 1:
            newNode.next = self.head
            self.head = newNode

        else:
            if pos == self.nodeCount + 1:
                prev = self.tail
            else:
                prev = self.getAt(pos - 1)
            newNode.next = prev.next
            prev.next = newNode

        if pos == self.nodeCount + 1:
            self.tail = newNode

        self.nodeCount += 1
        return True

    #구현 부분 
    def popAt(self, pos):
        
        if pos < 1 or pos > self.nodeCount:
            raise IndexError
            
        cur_data=0
                  
        if pos == 1:
            if self.nodeCount==1:     
                cur_data=self.head.data
                self.head=None
                self.tail=None
            else:    
                cur_data=self.head.data
                self.head=self.head.next
        
        else:
            prev = self.getAt(pos - 1)
            cur=prev.next       
            cur_data=cur.data
            if pos==self.nodeCount:
                prev.next=None
                self.tail=prev         
            else :                                              
                prev.next = cur.next
                        
        self.nodeCount -= 1
        
        return cur_data



    def traverse(self):
        result = []
        curr = self.head
        while curr is not None:
            result.append(curr.data)
            curr = curr.next
        return result


def solution(x):
    return 0