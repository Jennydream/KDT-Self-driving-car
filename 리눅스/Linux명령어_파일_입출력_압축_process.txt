1. Linux 필수 명령어 
  <Tab>키를 사용하여 자동완성 
  
  pwd : print working directory( 경로 출력)[/: root, ~: home , - : 이전경로]
  cd  : 디렉토리 이동 
  ls  : list file (파일의 정보 보여줌)[rwxrwxrwx : 각각 owner, group, others로 나뉨. 8진수로 표기]
  cp  : copy
  mv  : move, rename
  rm  : remove
  mkdir : make directory
  chmod : change mode
  이외 ln, find, ssh, vim 등 
  
2. 파일 관련 

  stat  : status of file( file의 meta data(파일이름, 생성시간 등) 을 출력)
  touch : file 메타정보 업데이트. 파일이 존재하지 않을 경우 빈 파일 생성 
  find  : find directory (예 : find . -name '*k.dat' -size +1500k [1500k이상의 파일 찾아서 출력)
  ln    : make link 
        i-node : 파일의 메타 정보 및 관리용 객체 (파일은 고유의 i-node를 1개 가지고 있다)
        
        1) hard link : 같은 i-node를 가리키므로 동일 파티션내에서만 생성 가능. regular file(-rwxr--r--)만 가능. 실체를 가진 파일. 파일에만 링크 가능
        
        2) symbolic link : path만 가리키므로 다른 파티션, 모든 종류의 file에서 만들 수 있음. 
        
        - canonicalization : symbolic link를 따라서 최종적으로 hard link까지 도착하여 실체를 읽을 수 있는데까지 path
   
   - file mode bit : UNIX의 파일 권한을 나타내는 3+9 bit 체계(숨겨진 3bit(SetUID,SetGID,Sticky bit-보안 관련)를 포함하여 12bit이지만 화면에는 9칸(rwxrwxrwx)만 표시됨) 
   - file 생성시 기본 값 : 기본 mode 값은 umask 값을 뺀 나머지가 된다.
      예 : umask 022, 디렉터리 777-022=755, 파일 666-022=644
 
 3. stdio(표준 입출력) 기초 
  
    stdio : Standard Input/Output(표준화된 입출력 방식을 사용하도록 하는 가상화 레이어의 일종)
          stdin(0), stdout(1), stderr(2)
    fd : file descriptor : 파일서술자, 파일기술자
    pipe : 프로세스 사이에 통신으로 사용 [예 : A | B | C  A,B,C를 직렬로 연결]
        anonymous pipe(temporary), named pipe(persistency)
        채널의 방향을 바꿀 때 : A>B (stdout을 파일 B로 연결), A<B(stdin을 파일 B로 연결), A << B (방향 같고 추가 모드)
    cat : stdout와 파일을 자유롭게 연결해주는 기본 필터 
  
  4. 아카이브, 압축 명령어 
    
     archive  : 보관용 묶음 
               tar(BSD), cpio(SysV)
               tar -[ctxv] : 옵션에서 v(verbose)는 디버깅이나 확인 용도이므로 사용하지 않는 것이 좋다.(시간 많이 소모)
               최근 압축 명령어(예) : tar c ./data ./exp | xz -TO ? bak_data.tar.xz
     compress : 압축
                압축률 : xz> bzip2 , zstd > gzip > lz4 (현재는 xz, zstd 많이 사용)
                gzip, bzip2, xz, zstd, lz4
  
  5. process 관련 명령어 
      
     ps   : process status( 기본적으로 현재 세션의 프로세스들을 보여줌)
          man ps로 UNIX SysV, BSD, GUN 스타일에 대해 살펴보기 
          BSD style : ps axf 
          UNIX SysV style : ps -e --forest
          
     kill : 프로세스에 시그널을 send 하는 기능( 프로세스를 죽인다는 것은 잘못된 표현)
          SIGHUP(hang up), SIGINT(Interrupt), SIGTERM(Terminate), SIGTSTP(Temporary Stop) 등 이 있음 
          명령어 사용법 : kill -9 process number(1111)/ kill %number/ kill -QUIT 1111
          
     job  : fore/back-ground process
           session : 멀티 유저 시스템에서 통신 객체(seat or remote)를 구별하기 위함
           daemon : control terminal을 가지지 않는 프로세스 
           
          1) fore-ground process : 현재 session에서 제어 터미널을 가진 프로세스
             제어 터미널을 소유한 프로세스는 키보드(물리적) 입력을 가진다. 따라서 하나의 session에서 fore-ground process는 최대 1개만 가능!!!
          2) back-ground process : 현재 session에서 제어 터미널을 잃어버린 프로세스           
          
            - 공통점 : 아래 명령어 모두 시그널을 fore-ground 프로세스에 전달
            - 차이점 :
                CTRL-Z : 잠시 정지시킴= 결과적으로 back-ground에 Stopped 상태로
                CTRL-C : SIGINT를 받은 프로세스가 프로세스 그룹 리더라면 프로세스 그룹에 속한 모든 프로세스에게 시그널이 전파됨 = 파생된 자식 프로세스도 전부 종료
                CTRL-C : CTRL-C와 같으나 core가 생성됨 = 프로그래머를 위한 기능  
           3) 명령어 종류 
              jobs : stoped, back-ground process의 리스트 출력 
              fg %# : 지정한 프로세스를 fore-ground로 [#은 jobs의 작업 번호(%는 생략 가능)]
              bg %# : 정지된 back-ground process를 back-ground에서 running 상태로 변경
              command & : command를 back-ground에서 running 상태로 실행시킴