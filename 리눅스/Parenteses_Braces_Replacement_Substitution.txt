1. parenteses
  - parenteses
    $(varname) : varname에 해당하는 문자열을 명령어로 인식하여 sub-shell로 실행 
    $((varname)) : varname에 해당하는 문자열을 수치연산으로 인식. let i++, let i=(i+3)*2 =>많이 사용. 이 외 i=$(($i+1)), i=`expr $i+1` 도 있음
    {...,...,...} :문자열 그룹. e.g. a{1,2,3}b=a1b, a2b,a3b와 부합 (공백 안됨)
    {..;...;} : 현재 shell에서 실행함. 공백, ; 생략시 에러 발생 
    [...] : 배열 변수의 인덱스 
    [ expression ] : 테스트 구문 
 
  - let/(())를 사용할경우 fork가 되지 않아 real time 시간이 줄어든다. expr을 썼을때 매번 프로세스가 fork가 되어 real time이 길어짐.
    let을 사용할 경우 ++, --와 같은 수치연산 및 비교 연산자를 그대로 사용 가능
    let과 (())은 호환 가능한 평가식을 가짐
    
2.braces
   뒤에 특정 부분만 똑같이 타이핑을 해야 할 경우에 오타를 막는 용도로 사용
   $cp hello{,.backup}
   for inter  in {1...10000} :for 수행시 예측가능한 범위로 작동하므로 빠를 가능성 높음
  
3. replacement, substitution
   확장된 변수 치환법 : 변수 값의 일부를 반환하는 기법. pattern(glob)치환-> 정규식 패턴 아님!
   
   ${#varname} : varname의 문자열 길이를 의미
   ${#arrayname[*]} :배열 안에 요소 개수를 의미 
   ${varname:offset} : 변수의 offset 위치부터 출력 
   ${varname:offset:len} : 변수의 offset 위치부터 len만큼 출력
   
  - default value, alternative, err
   ${varname:=default} :varname이 null이면 default를 할당. 아니면 기존 값으로 치환 
   ${varname:-default} :varname이 null이면 default를 반환
   ${varname:+alternat}:varname이 null이 아니면 alternat를 반환. null이면 그대로.
   ${varname:?error} :varname이 null이면 에러 발생 후 error 메시지 값을 화면에 출력 
   
  - prefix/suffix removal 
  
    ${varname%pattern} : 후방 탐색으로 pattern과 매치되는 varname의 값이 삭제 됨. 최대한 적은 수의 패턴 매칭 수행
    ${varname%%pattern} : 최대한 많은 수의 패턴 매칭 수행
    
    ${varname#pattern} : 전방 탐색으로 pattern과 매치되는 varname의 값이 삭제 됨. 최대한 적은 수의 패턴 매칭 수행
    ${varname##pattern} : 최대한 많은 수의 패턴 매칭 수행
   