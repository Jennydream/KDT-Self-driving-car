vim editor

1. Linux에서 가장 많이 쓰이는 텍스트 편집기

  vim : vi에 추가적인 확장 기능 부여(Amiga 부터)

  -vim 설치 :
   1) RH 계열 : yum -y install vim-enhanced
   2) Debian 계열 : sudo apt -y install vim
   
  -파일 열기 : vim mytext.txt 
  
  -mode : key 
   a : 현재 커서 위치에서 한칸 뒤로 이동한 후 입력 모드로 전환 
   i : 현재 커서 위치에서 입력모드로 전환
   o : 현재 행 아래에서 새로운 행을 하나 만든 후 입력 모드로 전환
   <ESC> -> :w (파일 저장), :q(vim 종료)
   #gg/#G/:# : #행으로 이동
   
2. vim 일반 모드 기초 명령어
    
   - delete/cut 
      x     : 커서에 위치한 문자 삭제
      dd/:d : 현재 행 삭제
      D     : 현재 컬럼 위치에서 현재 행의 끝부분까지 삭제(=d$)
      J     : 아래 행을 현재 행의 끝에 붙임(아래 앞부분 공백은 제거됨)
     
   - paste 
      p     : 현재 행에 붙여 넣음(put)
      :pu   : 개행 문자가 포함된 경우에는 현재 행의 아래에 붙여 넣음
      
   - copy 
      yy/:y/Y : 현재 행을 레지스터에 복사(yank)
      
     -undo/redo 
      u     : (undo)바로 이전에 행한 명령어 한 개 취소 
      CTRL-R: (redo)바로 이전에 취소한 명령어 다시 실행
      
3. vim 클립보드 

   - vi   : vim 종류 중에 가장 적은 기능을 가지고 있다. compact vim / tiny vim이라 부름
            vim-minimal(RedHat 계열), vim-tiny(Debian계열)
   - vim  : 일반적인 vim을 의미. enhanced vim이라고도 부름
            vim-enhanced(RedHat 계열), vim-nox(Debian계열)
   - vimx : 가장 많은 기능을 가진 vim. vim+clipborad, X window clipboard기능 포함
            vim-athena(Debian계열)
            
   - X window 환경에서 vim과 클립보드 공유 
     $ vim --version | grep clipboard -> (+xterm_clipboard 되어야 함)
     
   - ~/.vimrc 파일에 저장 가능
     :set. :set all, :set[no]name 등의 명령어 있음
     
   - 한번에 여러줄 입력하기
     gg^<CTRL-V>GI#<ESC><ESC>
     
     gg : 맨 위로 이
     ^  : 맨 앞으로 이동
     <CTRL-V> : 비주얼모드 전환 
     G  : 맨아래로 이동
     I  : 입력 모드 
     #  : 입력할 내용
     <ESC> : 두번 연속으로 누르면 전체 줄에 내용 추가 됨
     
4. help / vim error
       
   - ^] : 해당 키워드가 정의된 커서로 이동
   - ^T : 이전으로 돌아가기 
   
   -".hello.c.swp" : 앞의 . 은 숨김파일. 수정할 때는 .swp파일을 작성하고 이후 원본 파일에 합쳐짐. 
     (파일을 수정할 때 원본 파일의 중간에 새로운 내용을 저장할 경우 나머지 데이터를 다 밀어내는 작업을 해야함)
   
   - 파일을 중복해서 오픈한 경우 error 발생     
     이미 파일이 열려 있을 때 process ID: # (still running)
     기존 파일이 crash로 swapfile이 제거되지 못한 경우 :  process ID: # 
   
5. 문자열 관련 기능  
 
   - 검색 
      /string  : string을 전방 탐색 
      ?string  : string을 후방 탐색 
      n  : 다음 탐색 결과 찾음 
      N  : n과 반대방향으로 탐색
      %  : 괄호 짝 찾아줌 
      
      
    -연습 
     1. man man > manpage.txt (-> vim으로 열기)
     2. /section : setction이 들어간 단어 찾기 
     3. /\csection : 대소문자 무시하고 section이 들어간 단어 찾기 
     4. /[section] : s,e,c,t,i,o,n이 들어간 단어 모두 찾기 
     5. /\M[section] : section단어만 찾기 
    
    - 교체하기 (substitute)    
      sed의 import (이런 기능 모르면 단어 하나씩 찾아서 다 바꿔야 함)
      [한 행에서 1~3번까지 검색결과가 있을 때 2번째만 교체하기 등의 작업]
      
      separator의 excape : :%s, /home/linuxer,/home/unixer,g (, 를 기준으로 /home/linuxer를 /home/unixer로 교체) [file, fileformat도 교체 가능]
      
      fileformat도 교체 : set ff=dos / set ff=unix
      
6. file 관련 기능 

    - buffer, register
      buffer : 파일을 편집하기 위한 임시 공간
      register : 텍스트 일부를 저장하고 있는 임시 공간 
      
    - edit, find
      :e(filename을 편집모드로 오픈), :e #[count](count번째 파일 오픈 )=CTRL-^
      
    - quit 
      :q! , qa!(복수개 창이 있을 때), :wq, :wqa
      
    - wirte, update 
      :w, :sav file(현재 파일을 다른 이름으로 저장), :up, :x(일반 모드 :ZZ)
      
    - 분할 창 
       
       1) 수평 : <CTRL-W> s / :sp
       2) 수직 : <CTRL-W> v / :vs
       3) 창 이동 : CTRL-W 방향 키 
   
7. encoding 
    
    - fileencodings 
      fence= value ( e.g. fence=ucs-bom, korea, utf-8, latin-1)
    
    - utf-8을 지원하지 않을 때 변환 방법
      1) :set ff=dos
      2) :set fence=korea
      3) :wq
      
    - abbreviation
      특정 단어 입력시 대체 입력하는 기능 
      ia : insert mode에서만 작동하는 기능 ( e.g. ia 시간0 <C-R>=strftime("%Y.%m.%d-%H:%M:%S")<CR>)
      ca : commandline mode에서만 작동하는 기능 (e.g. ca ㅈ w)
      
    - 들여쓰기 다시 하기 (아래 명령어 순서대로 하기)
      1) gg
      2) =
      3) G 
      
    - 자동으로 vimrc를 만들어 주는 곳 
      -> https://vim-boostrap.com/
    