1. sed (stream editor)
   
   - text filter로서의 특징
      가볍고 빠른 교체 기능 제공. ed(line editor)의 명령어 집합을 개량하여 만들어짐. 원본을 변경하는 방식은 아님. vim의 substitute와 동일
      -ed(line editor)의 문제점 : stream으로 처리하는 기능이 부족. sed 기능이 필요
   
   구분자는 관습적으로 /,|, #,%를 사용하는 경우가 많음
   -sed 's/ */ /g' infile : 복수의 공백을 1개의 공백으로 치환
   -sed '/^$/d' infile : 공백 라인의 제거
   
   -r 옵션 : 복잡한 RE를 사용하는 경우 복잡한 표현을 줄여준다.(유용)
   
2. awk 
   
    란? : 패턴 검색과 처리 언어.
    설계자의 이름 첫글자에서 유래 (Aho, Weinberger, Kernighan)
    grep, sed로 처리가 불가능할 경우 awk 사용을 검토.
    
    - awk script는 single quotes로 묶음
    - GNU awk(gawk)에서 POSIX로 작동하려면 --posix 옵션 주기
 
3. Debugging, verbose
   
   #! /bin/bash -x : 명령행의 실행후 값과 결과를 출력하여 값의 변화를 추적할 수 있게 해줌
   #! /bin/bash -v : 명령행의 소스를 그대로 출력함-> 실행 흐름을 알 수 있게 해줌
   
   -명령어 
    set -x : xtrace on, set +x : xtrace off
    set -v : verbose on, set +v : verbose off
   
   -trap 
    command, function : 시그널이 캐치되면 작동될 명령 혹은 함수 (e.g. trap -SIGTERM)
    trap은 shell, subshell에는 적용되나 child에는 상속되지 않음
    -trap 선언 위치 : function안에서 선언ㅇ되면, 해당 function scope에서만 유효 (trap -p: trap 리스트 출력)
   
   -pkill, pgrep 
    process의 이름만 알고 pid를 모르는 경우 kill을 쓸때 사용
    e.g. pkill -fx ".*trap01.sh"
 
4. sub-shell 
   
   -echo $?는 exit code이지만 범위에 따라 의미가 다름 
    echo $?명령위에 echo "===="와 같은 명령을 먼저 실행했다면 결과는 항상 0이되므로 출력을 조심해야 함
   
   -wait 
    특정 PID를 기다릴때 사용 (wait $child_pid)
   
   -error
    bash에서 critical section처리 할 때 : set -e로 error on exit옵션을 켜고 작업하기.(exit code가 non-zero가 감지되면 스크립트는 즉시 종료됨)
    critical section이 종료되면 set +e로 옵션을 끈다.
    
5. set
   - bash에는 2가지 옵션 존재 
     (1) set 계열: UINX sh(bourne shell), ksh, 다른 shell 변종의 기능을 계승 (set -0 errexit)
     (2) shopt 계열 : original bash options. set에는 없는 bash만의 확장 기능을 포함 (shopt -s autocd)
   
   - $- : set option의 값을 읽어옴 (e.g. case $- in ...)
   
   - SGR(select graphic rendition)
     color code : CSI+n+m
     
6. shell function

   - function
     반복되는 호출 및 재사용을 위해 function작성 (function부분을 별개의 file로 만드는 경우가 많음-> source 및 . 명령으로 import)
     모듈로 사용되는 파일에는 .sh 확장자를 쓰지 않는 경우가 많음 
     
    - shell script 작성시 주의!
      - exit code는 성공시 0, 실패시 1~255 사이 값을 리턴 
      - shell 변수 사용전 Null 검사를 꼭 하는 것이 좋음 
      - file에 접근하기 전에 유무, 접근 가능 여부를 검사해야 함
      - 인수(argument)사용시 개수를 검사해야 함 ($#)
      - 성능을 위해 Built-in command를 우선적으로 사용(expr보다 let, (()) 사용 )
      
    - ssh key사용
      ssh 실행시 password를 쓰지 않기 위해 key 사용 
      ssh-keygen, ssh-copy-id를 이용해 키 기반 접속 세팅 