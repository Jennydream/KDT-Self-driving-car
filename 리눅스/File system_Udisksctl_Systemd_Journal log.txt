1. Fs(File System)

   1) File System 종류 및 만들기 
      FS : OS의 큰 부분을 차지 (컴퓨터 시스템의 메모리 역할 중 일부분 담당)
          파일을 (계층적 구조)저장 
      FS type : Linux-> xfs, ext4, zfs, Btrfs
                Windows : ntfs, exfat, fat32, fat16 
                
     - 새로운 FS 만드는 순서
     
       (1) Partitioning : Phsical or logical 구획 (최근에는 logical partition 선호[logical voulume])
           - disklable type 
             Dos 방식 : 고전적인 방식 (주 파티션, 확장 파티션, 논리 드라이브)                
             GPT 방식 : dos 레이블의 문제를 개선하기 위해 나온 새로운 방식                        
       (2) fdisk
           fdisk -l : 현재 FS 리스트 출력 (최근에는 lsblk 를 더 많이 사용)
           저장 장치 : SCSI disk, SATA, USB
           변경후 명령어 : q(변경 상태를 저장하지 않고 종료), w(변경된 상태를 저장하고 종료), <CTRL-C> 강제 종료 
       (3) Mount 
       
   2) Make FS
      partition : 저장 장치를 나누는 작업 
      Make FS : partition 된 장치를 규격화 된 형태로 잘라서 인덱싱 기능 만들기(ext4, xft, ntfs등 사용) 
      
      ext4 : IoT 기기에 유리, 대부분의 Linux에서 사용, jouraling지원, 연속된 파일의 접근 및 작은 파일들의 접근 빠름, 삭제된 파일 복구 할 수 있음
      xfs  : 저널링 기반의 대용량 FS, Online 상태에서 확장 가능, kernel service가 관리, 삭제된 파일 복구할수 없음, 깨진 파일 복구 (xfs_repair)
           
      mkfs : mkfs.ext4 /dev/sdb2
      fsck : 일반적으로 offline된 FS 체크 (fsck.ext4 -y /dev/sdb2)
      swap : swapon -a, swapoff -a 
            
   3) Mount
      mount는 root directory(/)를 기점으로 시작 (file system에 탑재됨)
      기본 명령어 : mouunt, umount, findmount
      
      -파티션 나누기 
            root@selfdriving-virtual-machine:~# fdisk /dev/sdb
            Welcome to fdisk (util-linux 2.27.1).
            Changes will remain in memory only, until you decide to write them.
            Be careful before using the write command.

            Command (m for help): p
            Disk /dev/sdb: 3 GiB, 3221225472 bytes, 6291456 sectors
            Units: sectors of 1 * 512 = 512 bytes
            Sector size (logical/physical): 512 bytes / 512 bytes
            I/O size (minimum/optimal): 512 bytes / 512 bytes
            Disklabel type: dos
            Disk identifier: 0x2a81014c

            Device     Boot Start     End Sectors  Size Id Type
            /dev/sdb1        2048 3123199 3121152  1.5G 83 Linux

            Command (m for help): n
            Partition type
               p   primary (1 primary, 0 extended, 3 free)
               e   extended (container for logical partitions)
            Select (default p): p
            Partition number (2-4, default 2): 2
            First sector (3123200-6291455, default 3123200): 
            Last sector, +sectors or +size{K,M,G,T,P} (3123200-6291455, default 6291455): +1.5G

            Created a new partition 2 of type 'Linux' and of size 1.5 GiB.

            Command (m for help): w
            The partition table has been altered.
            Calling ioctl() to re-read partition table.
            Syncing disks.

            root@selfdriving-virtual-machine:~# lsblk
            NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
            sdb      8:16   0    3G  0 disk 
            ├─sdb2   8:18   0  1.5G  0 part 
            └─sdb1   8:17   0  1.5G  0 part 
 
      연습 : /dev/sdb2를 mount하기 
        (1) : VMware에 sdb추가 
        (2) : sdb에 2개의 pratition만들기 
        (3) : mkfs -t ext4 /dev/sdb2
        (4) : mkdir media/backup
        (5) : mount -t ext4 /dev/sdb2 /media/backup
        ->umount하기 : umount /media/backup 혹은 umount /dev/sdb2
        (6) lsblk (확인)
       
       USB memory : USB 메모리를 장착하면 lsblk에서 장치명이 인식됨 (mount 명령으로 인식)
       
   4) fstab
      fstab(filesystem table) : /etc/fstab위치 , 부팅시 파일 시스템을 자동 마운트 하기 위한 정보를 담고 있음, 
                                mount 명령을 단축시킬 수 있는 정보 가짐(장치파일, 마운트 포인트, 파일 시스템 타입, 옵션, 덤프 여부, 부팅시 체크순서)
      LABEL : 식별 가능한 문자열을 FS의 lable부분에 넣어서 찾는 방법
      UUID  : (universally unique identifie)를 FS에 넣어 찾는 방법 (이 방법을 더 많이 사용) 
      
      디렉터리 구조 : /, /dev( 장치 파일들), /tmp (임시 파일 저장), /dev/null(널 디바이스),/dev/console(시스템 콘솔 장치) 이외에도 더 많은 세부 구조 존재
   
2. Proc filesystem
   
   /proc : 프로세스 정보를 담고 있는 가짜 FS이다.
   
   명령어 : ls , (e.g.)exe 선택, ls -l exe( 결과 : exe-> /usr/bin/bash 와 같이 출력 )
   /proc/####: :proc뒤에 pid 입력하여 세부 정보 확인    
   /proc/cpuinfo : cpu 스펙 정보 
   cat /proc/stat : cpu와 process관련 글로벌 통계 정보

3. udisksctl
   - D-bus기반의 block device manager (수동으로 mount하는 방식을 개량하여 만듦)
     daemon service 작동, 다양한 block device에 대한 관리, udiskctl CLI제공 
     
     systemctl status udisks2 : service 확인 
     udiskctl <tab>*2 : 명령어 다 출력 
     
     USB memory stick의 mount/umount를 console에서 진행하기 
       (1) udiskctl mount --block-device /dev/sdc1 (결과 : /dev/sdc1이 /XX/XX(임시 파일)로 mount됨) 
       (2) lsblk
       (3) udiskctl umount --block-device /dev/sdc1
       
4. systemd

  1) background 
     모든 프로세스는 parent process로부터 복제 되어짐 
     But PID 1번은 kernel에 의해 생성됨 ( 시스템 기동 및 관련된 작업을 하는 최초의 프로세스)
     init : SysV 유닉스에서 만들어 짐, 부팅시 초기화 담당. (현재는 systemd 사용)
     systemd : 시스템 설정을 통합 관리하는 데몬
     ls -l $(which init) : 결과로 다른 위치 알려줌( 현재 호환성을 위해 제공)
          
  2) unit
     systemd : unit 단위로 시스템 관리, 병렬처리. 
     3가지 기능의 binaries : 
     (1) system configuration : hostnamectl, localectl, timedatctl...
     (2) system monitoring/querying : systemd-analyze, jouralctl, loginctl...
     (3) system controlling : systemctl
     
  3) systemctl #1
     systemctl : list-units 화면에 대한 설명 
     systemctl --all --state=dead : dead가 들어간 것 보여줌 
  
  4) systemctl #2
     systemtcl status (e.g.)nginx : unit 상태 출력 
     systemtcl start/stop  : unit  시작/정지  
     systemctl is-active nginx : unknow(결과)
     echo $?  : exit code가 non-zero로 세팅되어 있음(0 : success, non-zero : fail)
     systemctl kill nginx --signal=SIGABRT : abort signal전송 
     
  5) systemctl #3
     systemctl enable : enable상태로 설정 후 reboot
      
  6) systemctl #4
     systemctl -t target : target리스트 출력 
     (1) multi-user.target : 멀티유저 모드
     (2) graphical.target  : 그래피컬 모드(graphical mode = multi-user + X window)
     
     sudo systemctl isolate multi-user
     root로 로그인 후
     systemctl isolate graphical
     systemctl get-default
     systemctl set-default mult-user
     systemctl get-default
     reboo
     
  7) systemd-analyzer
     systemd-analyze : systemd의 구동을 분석(각 서비스의 시간을 분석 및 시각화 
  
5. journal log
   기존 tail 명령어의 단점을 보완하기 위해 만들어짐 (시간순으로 기록), 메모리 기반이기때문에 재부팅할 경우 다 날림, root계정으로 진행
   
   journalctl : journal 출력 (추가로 옵션 설정 가능)
   journalctl –f 로 확인 가능 
   특정 log만 보고 싶을 때 : journalctl –p <priority> (e.g. err)[(-fp도 가능)