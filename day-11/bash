1. bash sell 배경 

   - Shell이란? : Application을 실행시키는 도구 
                 OS의 커널에 직접 접근할 수 없기때문에 명령어 해석기인 shell이 필요
   - History of shell
     (1) Bourne shell : /bin/sh ( POSIX shell, 표준 shell)
     (2) C shell  : /bin/csh
     (3) Korn shell : /bin/ksh (UNIX의 sh개량형 -많이 가장많이 사용됨)
     (4) bash : /bin/bash (The most popular shell) (Linux, Mac OSX에서 가장 많이 상요되는 shell)
     (5) Zsh  : /bin/zsh (데스크탑 편의성에 맞춘 기능이 많음)
    
   - special character 
     ` : backtict
     # : hash
     ^ : caret 
     이 외에도 많음!
     
   - vi , emacs input mode
     
     vi : set -o vi
     -editing mode : j(1줄 아래 이동), k(1줄 위로 이동), #G(#번째 이동), TAB(command-completion),= (매칭된 파일 이름 출력), *(매칭된 모든 파일명 프롬프트로 복사),/(전방 탐색),?(후방 탐색) 
     
     emacs : set -o emacs
     -editing mode : ^A(라인 앞으로 이동), ^E(라인 뒤로 이동), ^L(=Clear), Tab(명령어 자동 완성),^R(명령어 후방 탐색), ^S(명령어 전방 탐색) 이 외 많음!
      ^ 문제점 : 기본적으로 Linux bash에서는 ^S를 STOP으로 사용. 따라서 이를 해제해야 ^S를 사용 가능 (~/.bashrc -> stty STOP '')설정
      
     -이전 명령어 일부분만 다시 가져오기 
      ![i]:n :이전 명령어의 n번째 가져오기 (0-n)
      ![i]:n-m :이전 명령어의 n부터 m까지 가져오기
      <ALT-.> : 이전 명령어의 마지막 가져오기

2. bash shell의 작동원리 
   -shell에서 실행되는 UNIX 명령어는 sub-shell(fork-exec로 만들어지는 child process)이 생성되어 실행 
    e.g. ls -al -> bash(parent process) -> fork -> bash:sub-shell(child process) ->exec -> ls -al(child process)
         복사하여 실행 후 exit code를 parent process에 반환 (echo $? 변수로 확인 => 0이면 성공, 그외 실패)
    parent process는 exit code를 통해 자식 프로세스가 성공했는지 실패했는지 알수 있고, 그 여부에 따라 다음 작업을 실행 혹은 에러처리 하게 된다.
    zombie process : parent process가 종료된 child process의 exit status를 처리하기 전의 상태 (프로세스가 종료되는 정상적인 과정중 하나이다)
  
  -rm --force 
   UNIX command에 --force 옵션이 존재하는 것은 child process로 작동할 때 exit code를 조작하기 위함이다. 
   force 옵션을 적용하면 return code를 0으로 넘겨주게 된다.(왜냐면 0이면 성공=> 다음 명령 실행 가능이므로)
   rm명령어의 결과를 무시해야 하는 겨우에 -rm으로 많이 사용
  
  -exit code 
   프로세스의 main 함수의 리턴값이다.(리턴값 범위 : 0~255)
   리턴 값을 보고 parent process는 child process가 어떻게 종료되었는지 알 수 있게 된다. 
   shell script에서 실행되는 모든 명령어 체계도 exit code/ signal 핸들링을 통해 안전하게 작성되어야 함. 따라서 정상작동이 아닌 경우에는 return 코드를 non-zero로 주도록 작성
   
   주의 : 특별한 경우가 아니면 root로 실습하지 않는다.
   
3. bash shell 문법 

   -변수 선언 : set
    [set] name=value (=사이에 공백이 없어야 함)
    ${name} :명확하게 변수명이 구별가능한 경우에 {}생략
           
   - 변수 삭제 : unset
    unset <name> : name에 해당하는 변수 삭제 
    
   - 환경 변수 선언 : 3가지 방법 
     (1) MY_ENV_VAR="Soo" ; export MY_ENV_VAR
     (2) export MY_ENV_VAR="Soo"    ( 가장 많이 사용)
     (3) declare -x MY_ENV_VAR="Soo"
     
   - path 추가 
     주의 : export PATH=~/development/sdk/bin:$PAHT =>이 경우 .bashrc를 여러번 import 하여 PAHT가 엉망 된다.(~)
    
   -rc (run command, runtime config)
    프로세스가 종료되면 shell 변수의 메모리 공간도 해제된다.
    bash가 실행될 때마다 파일을 읽기 위해 rc나 profile에 변수의 값을 저장시켜야 함. 
    .bashrc, bash_profile에서 저장 
    
4. invoking type
   -invoking mode 
    (1) interactive login shell 
        import /etc/profike (if exist) : gloabl profile(로그인 환경 설정)
        ~/.bash_profile, ~/.bash_login, ~/.profile (계열에 따라 차이가 있음)
        ~/.bash_logout (종료시 실행)
        
    (2) interactive non-login shell
        -non-login shell: X window에서 실행된 terminal 어플리케이션이나 su로 열리는 shell
        import ~/.bashrc (if exist)
    (3) non-interactive shell
    
    e.g. $source ./hellobash.sh 
    (source 또는 .  명령을 이용하는 방식이 현재 shell에서 import 하는 방식. 즉 interactive shell에서 실행을 의미, but sub-shell을 생성하지 않는 방법이므로 위험 할 수 있음)
 
5. script 구조 
   -scripting : bash 문법을 실행할 수 있도록 작성하되 매번 타이핑 하는 것이 힘들기때문에 파일로 저장하여 반복 실행을 쉽게 할 수 있도록 함.
    (파일 실행 권한을 주거나 bash가 실행하면서 불러오도록 해야 함)
   
   -script file 구조 : *.sh 파일명 가짐.
    e.g. #!(셔뱅/시뱅/쉬뱅) /bin/bash   
    /bin/bash != /bin/sh (sh보다 bash 사용해야 함)
   
   - variable 
     전역변수 - 기본 값
   
   
   
    
    
