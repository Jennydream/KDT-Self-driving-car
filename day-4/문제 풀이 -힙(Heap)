#알고리즘 

힙? : 최대/최소 원소를 빠르게 찾을 수 있음.

  -문제 : 더 맵게 
  
  1. 일반 배열 사용 할 때 
  
      매운 값 계산한 후 해당 값을 정렬된 기존 배열 값에서 순서에 맞는 위치에 삽입 
      해당 값들이 k를 넘을 때 까지 반복 횟수 계산
      마지막 1개가 남아도 k가 안되면 -1
      
  2. 힙 사용할 때 
    힙 구성-> 삽입-> 삭제
    
    import heapq
    
    heapq.heapify(L)    : 리스트 L로부터  min heap 구성 
    m=heapq.heappop(L)  : min heap L에서 최소값 삭제
    heapq.heappush(L,x) : min heap L에 원소 x 삽입

#시간 복잡도 :
  1. 일반 배열 : O(n^2)
  2. 힙 : O(NlogN)

#문제풀이 

매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항
scoville의 길이는 1 이상 1,000,000 이하입니다.
K는 0 이상 1,000,000,000 이하입니다.
scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.

import heapq

def solution(scoville, K):
    answer = 0
    
    #min heap 구성 
    heapq.heapify(scoville)
    
    while True:
        #힙에서 최솟 값 꺼냄
        m= heapq.heappop(scoville)
        
        #만약 꺼낸 값이 K보다 크면 조건 만족하므로 break
        if m>=K:
            break
        # 마지막 요소까지 꺼내도 if 조건이 안된다면 -1
        elif len(scoville)==0:
            answer=-1
            break
            
        # 위의 두 조건이 아닐 경우 두번째 맵지 않은 값을 꺼내어 계산 후 다시 push
        m2=heapq.heappop(scoville)
        new_m=m+2*m2
        heapq.heappush(scoville, new_m)
        
        #계산 될 때마다 1 증가 
        answer+=1
        
    return answer
